[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Database.scala","languageId":"scala","version":2,"text":"import slick.driver.H2Driver.api._\r\nimport scala.concurrent.ExecutionContext.Implicits.global\r\n\r\nsealed final class Database(){\r\n    val db = Database.forConfig(\"h2mem\")\r\n\r\n    h2mem { \r\n        url = \"jdbc:h2:mem:DB\" \r\n        driver = org.h2.Driver \r\n        keepAliveConnection = true \r\n        connectionPool = disabled \r\n    }\r\n\r\n    class AirportTable(tag: Tag) extends Table[Airport](tag, \"AIRPORTS\"){\r\n        def id = column[Int](\"AIRPORT_ID\", O.PrimaryKey, O.AutoInc)\r\n        def ident = column[String](\"IDENT\")\r\n        def building_type = column[String](\"TYPE\")\r\n        def name = column[String](\"NAME\")\r\n        def latitude_deg = column[Float](\"LATITUDE_DEG\")\r\n        def longitude_deg = column[Float](\"LONGITUDE_DEG\")\r\n        def elevation_ft = column[Int](\"ELEVATION_FT\")\r\n        def continent = column[String](\"CONTINENT\")\r\n        def iso_country = column[String](\"ISO_COUNTRY\")\r\n        def iso_region = column[String](\"ISO_REGION\")\r\n        def municipality = column[String](\"municipality\")\r\n        def scheduled_service = column[String](\"SCHEDULED_SERVICE\")\r\n        def gps_code = column[String](\"GPS_CODE\")\r\n        def iata_code = column[Option[String]](\"IATA_CODE\")\r\n        def local_code = column[String](\"LOCAL_CODE\")\r\n        def home_link = column[Option[String]](\"HOME_LINK\")\r\n        def wikipedia_link = column[Option[String]](\"WIKIPEDIA_LINK\")\r\n        def keywords = column[Option[String]](\"KEYWORDS\")\r\n        def * = (id, ident, building_type, name, latitude_deg, longitude_deg, elevation_ft, continent, iso_country, iso_region, municipality, \r\n                 scheduled_service, gps_code, iata_code, local_code, home_link, wikipedia_link, keywords)\r\n    }\r\n    val airports = TableQuery[AirportTable]\r\n\r\n    class CountriesTable(tag: Tag) extends Table[Countries](tag, \"COUNTRIES\"){\r\n        def id = column[Int](\"COUNTRY_ID\", O.PrimaryKey, O.AutoInc)\r\n        def code = column[String](\"CODE\")\r\n        def name = column[String](\"NAME\")\r\n        def continent = column[String](\"CONTINENT\")\r\n        def wikipedia_link = column[String](\"WIKIPEDIA_LINK\")\r\n        def keywords = column[Option[String]](\"KEYWORDS\")\r\n        def * = (id, code, name, continent, wikipedia_link, keywords)\r\n    }\r\n    val countries = TableQuery[CountriesTable]\r\n\r\n    class RunwaysTable(tag: Tag) extends Table[Runways](tag, \"RUNWAYS\"){\r\n        def id = column[Int](\"ID\", O.PrimaryKey, O.AutoInc)\r\n        def airport_ref = column[Int](\"AIRPORT_REF\")\r\n        def airport_ident = column[String](\"AIRPORT_IDENT\")\r\n        def length_ft = column[Int](\"LENGTH_FT\")\r\n        def width_ft = column[Int](\"WIDTH_FT\")\r\n        def surface = column[String](\"SURFACE\")\r\n        def lighted = column[Int](\"LIGHTED\")\r\n        def closed = column[Int](\"CLOSED\")\r\n        def le_ident = column[String](\"LE_IDENT\")\r\n        def le_latitude_deg = column[Option[Float]](\"LE_LATITUDE_DEG\")\r\n        def le_longitude_deg = column[Option[Float]](\"LE_LONGITUDE_DEG\")\r\n        def le_elevation_ft = column[Option[Int]](\"LE_ELEVATION_FT\")\r\n        def le_heading_degT = column[Option[Float]](\"LE_HEADING_DEGT\")\r\n        def le_displaced_threshold_ft = column[Option[Int]](\"LE_DISPLACED_THRESHOLD_FT\")\r\n        def he_ident = column[Option[String]](\"HE_IDENT\")\r\n        def he_latitude_deg = column[Option[Float]](\"HE_LATITUDE_DEG\")\r\n        def he_longitude_deg = column[Option[Float]](\"HE_LONGITUDE_DEG\")\r\n        def he_elevation_ft = column[Option[Int]](\"HE_ELEVATION_FT\")\r\n        def he_heading_degT = column[Option[Float]](\"HE_HEADING_DEGT\")\r\n        def he_displaced_threshold_ft = column[Option[Int]](\"HE_DISPLACED_THRESHOLD_FT\")\r\n        def * = (id, airport_ref, airport_ident, length_ft, width_ft, surface, lighted, closed, le_ident, le_latitude_deg, le_longitude_deg,\r\n                 le_elevation_ft, le_heading_degT, le_displaced_threshold_ft, he_ident, he_latitude_deg, he_longitude_deg, he_elevation_ft, \r\n                 he_heading_degT, he_displaced_threshold_ft)\r\n    }\r\n}\r\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[33mwarn[0m] [0m[0m[0m
[0m[[0m[33mwarn[0m] [0m[0m	Note: Unresolved dependencies path:[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":2,"message":"\n\tNote: Unresolved dependencies path:"})[0m
[0m[[0m[31merror[0m] [0m[0msbt.librarymanagement.ResolveException: Error downloading com.typesafe.slick:slick_2.13:3.3.1[0m
[0m[[0m[31merror[0m] [0m[0m  Not found[0m
[0m[[0m[31merror[0m] [0m[0m  Not found[0m
[0m[[0m[31merror[0m] [0m[0m  not found: C:\Users\admin\.ivy2\localcom.typesafe.slick\slick_2.13\3.3.1\ivys\ivy.xml[0m
[0m[[0m[31merror[0m] [0m[0m  not found: https://repo1.maven.org/maven2/com/typesafe/slick/slick_2.13/3.3.1/slick_2.13-3.3.1.pom[0m
[0m[[0m[31merror[0m] [0m[0m	at lmcoursier.CoursierDependencyResolution.unresolvedWarningOrThrow(CoursierDependencyResolution.scala:345)[0m
[0m[[0m[31merror[0m] [0m[0m	at lmcoursier.CoursierDependencyResolution.$anonfun$update$38(CoursierDependencyResolution.scala:314)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.util.Either$LeftProjection.map(Either.scala:573)[0m
[0m[[0m[31merror[0m] [0m[0m	at lmcoursier.CoursierDependencyResolution.update(CoursierDependencyResolution.scala:314)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.librarymanagement.DependencyResolution.update(DependencyResolution.scala:60)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.internal.LibraryManagement$.resolve$1(LibraryManagement.scala:59)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$12(LibraryManagement.scala:133)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.util.Tracked$.$anonfun$lastOutput$1(Tracked.scala:73)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$20(LibraryManagement.scala:146)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.util.control.Exception$Catch.apply(Exception.scala:228)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$11(LibraryManagement.scala:146)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$11$adapted(LibraryManagement.scala:127)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.util.Tracked$.$anonfun$inputChangedW$1(Tracked.scala:219)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.internal.LibraryManagement$.cachedUpdate(LibraryManagement.scala:160)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Classpaths$.$anonfun$updateTask0$1(Defaults.scala:3690)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.Function1.$anonfun$compose$1(Function1.scala:49)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:62)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.std.Transform$$anon$4.work(Transform.scala:68)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Execute.$anonfun$submit$2(Execute.scala:282)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:23)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Execute.work(Execute.scala:291)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Execute.$anonfun$submit$1(Execute.scala:282)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.CompletionService$$anon$2.call(CompletionService.scala:64)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.base/java.lang.Thread.run(Thread.java:833)[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"sbt.librarymanagement.ResolveException: Error downloading com.typesafe.slick:slick_2.13:3.3.1\r\n  Not found\r\n  Not found\r\n  not found: C:\\Users\\admin\\.ivy2\\localcom.typesafe.slick\\slick_2.13\\3.3.1\\ivys\\ivy.xml\r\n  not found: https://repo1.maven.org/maven2/com/typesafe/slick/slick_2.13/3.3.1/slick_2.13-3.3.1.pom\r\n\tat lmcoursier.CoursierDependencyResolution.unresolvedWarningOrThrow(CoursierDependencyResolution.scala:345)\r\n\tat lmcoursier.CoursierDependencyResolution.$anonfun$update$38(CoursierDependencyResolution.scala:314)\r\n\tat scala.util.Either$LeftProjection.map(Either.scala:573)\r\n\tat lmcoursier.CoursierDependencyResolution.update(CoursierDependencyResolution.scala:314)\r\n\tat sbt.librarymanagement.DependencyResolution.update(DependencyResolution.scala:60)\r\n\tat sbt.internal.LibraryManagement$.resolve$1(LibraryManagement.scala:59)\r\n\tat sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$12(LibraryManagement.scala:133)\r\n\tat sbt.util.Tracked$.$anonfun$lastOutput$1(Tracked.scala:73)\r\n\tat sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$20(LibraryManagement.scala:146)\r\n\tat scala.util.control.Exception$Catch.apply(Exception.scala:228)\r\n\tat sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$11(LibraryManagement.scala:146)\r\n\tat sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$11$adapted(LibraryManagement.scala:127)\r\n\tat sbt.util.Tracked$.$anonfun$inputChangedW$1(Tracked.scala:219)\r\n\tat sbt.internal.LibraryManagement$.cachedUpdate(LibraryManagement.scala:160)\r\n\tat sbt.Classpaths$.$anonfun$updateTask0$1(Defaults.scala:3690)\r\n\tat scala.Function1.$anonfun$compose$1(Function1.scala:49)\r\n\tat sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:62)\r\n\tat sbt.std.Transform$$anon$4.work(Transform.scala:68)\r\n\tat sbt.Execute.$anonfun$submit$2(Execute.scala:282)\r\n\tat sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:23)\r\n\tat sbt.Execute.work(Execute.scala:291)\r\n\tat sbt.Execute.$anonfun$submit$1(Execute.scala:282)\r\n\tat sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)\r\n\tat sbt.CompletionService$$anon$2.call(CompletionService.scala:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\r\n\tat java.base/java.lang.Thread.run(Thread.java:833)"})[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched json error for requestId None: {"code":-32603,"message":"(\u001b[31mupdate\u001b[0m) sbt.librarymanagement.ResolveException: Error downloading com.typesafe.slick:slick_2.13:3.3.1\r\n  Not found\r\n  Not found\r\n  not found: C:\\Users\\admin\\.ivy2\\localcom.typesafe.slick\\slick_2.13\\3.3.1\\ivys\\ivy.xml\r\n  not found: https://repo1.maven.org/maven2/com/typesafe/slick/slick_2.13/3.3.1/slick_2.13-3.3.1.pom"}[0m
[0m[[0m[31merror[0m] [0m[0m([31mupdate[0m) sbt.librarymanagement.ResolveException: Error downloading com.typesafe.slick:slick_2.13:3.3.1[0m
[0m[[0m[31merror[0m] [0m[0m  Not found[0m
[0m[[0m[31merror[0m] [0m[0m  Not found[0m
[0m[[0m[31merror[0m] [0m[0m  not found: C:\Users\admin\.ivy2\localcom.typesafe.slick\slick_2.13\3.3.1\ivys\ivy.xml[0m
[0m[[0m[31merror[0m] [0m[0m  not found: https://repo1.maven.org/maven2/com/typesafe/slick/slick_2.13/3.3.1/slick_2.13-3.3.1.pom[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"(\u001b[31mupdate\u001b[0m) sbt.librarymanagement.ResolveException: Error downloading com.typesafe.slick:slick_2.13:3.3.1\r\n  Not found\r\n  Not found\r\n  not found: C:\\Users\\admin\\.ivy2\\localcom.typesafe.slick\\slick_2.13\\3.3.1\\ivys\\ivy.xml\r\n  not found: https://repo1.maven.org/maven2/com/typesafe/slick/slick_2.13/3.3.1/slick_2.13-3.3.1.pom"})[0m
[0m[[0m[31merror[0m] [0m[0mTotal time: 3 s, completed 10 févr. 2022, 16:31:23[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/model/Airport.scala","languageId":"scala","version":1,"text":"package fileReader.model\r\n\r\nimport scala.util.Try\r\n\r\nfinal case class Airport(id: Int, \r\n                         ident: NonEmptyString, \r\n                         building_type: NonEmptyString, \r\n                         name: NonEmptyString, \r\n                         latitude_deg: Float, \r\n                         longitude_deg: Float, \r\n                         elevation_ft: Int, \r\n                         continent: Code, \r\n                         iso_country: Code, \r\n                         iso_region: String, \r\n                         municipality: String, \r\n                         scheduled_service: String, \r\n                         gps_code: Option[String], \r\n                         iata_code: String, \r\n                         local_code: Option[String], \r\n                         home_link: Option[String], \r\n                         wikipedia_link: Option[String] ) extends Airport\r\n\r\n\r\nobject Airport {\r\n  def fromCsvLine(line: Array[string]): Option[Airport] = {\r\n    parseAirport(line)\r\n  }\r\n\r\n\r\n  //pattern matching is forbose so you can implement detailed error msg if you feel like it\r\n  def parseAirport(line: Array[String]) = {\r\n    (Try(line(1).toInt).toOption, Try(line(7).toInt).toOption, Try(line(5).toFloat).toOption, Try(line(6).toFloat).toOption) match {\r\n      case (Some(x), Some(y), Some(z), Some(a)) => Some(Airport(x, line(2) , line(3), line(4), z, a, y, line(8), line(9), line(10), line(11), line(12), line(13), line(14), line(15), line(16), line(17))\r\n      case (None, Some(_), Some(_), Some(_)) | (Some(_), None, Some(_), Some(_)) | (Some(_), Some(_), None, Some(_)) | (Some(_), Some(_), Some(_), None) => None // 1 error\r\n      case (None, None, Some(_), Some(_)) | (None, Some(_), None, Some(_)) | (None, Some(_), Some(_), None)| (Some(_), None, Some(_), None) | (Some(_), None, None, Some(_)) | (Some(_), Some(_), None, None) => None // 2 errors\r\n      case (Some(_), None, None, None) | (None, Some(_), None, None) | (None, None, Some(_), None) | (None, None, None, Some(_)) => None // 3 error\r\n      case (None, None, None, None) => None // 4 errors\r\n    }\r\n  }\r\n}\r\n\r\nclass NonEmptyString (val underlying: String) extends AnyVal\r\n\r\nobject NonEmptyString {\r\n  def foo: NonEmptyString = new NonEmptyString(checkEmpty(underlying))\r\n\r\n  def checkEmpty(arg: String){\r\n    arg match {\r\n      case None    => None\r\n      case Some(s) => s.trim.isEmpty\r\n    }\r\n  }\r\n  \r\n}\r\n\r\nclass Code (val underlying: String) extends AnyVal\r\n\r\nobject Code {\r\n  def foo: Code = new Code(checkCode(underlying))\r\n\r\n  def checkCode(arg: String){\r\n    val pattern = new Regex(\"[A-Z][A-Z]\")\r\n    arg match{\r\n      case pattern => arg\r\n      case _       => None\r\n    }\r\n  }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Database.scala"},"position":{"line":78,"character":8}}[0m
[0m[[0m[0minfo[0m] [0m[0mSymbol not found in definition request {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Database.scala"},"position":{"line":78,"character":8}}[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Database.scala"},"position":{"line":79,"character":22}}[0m
[0m[[0m[0minfo[0m] [0m[0mSymbol not found in definition request {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Database.scala"},"position":{"line":79,"character":22}}[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/model/Airport.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Main.scala","languageId":"scala","version":1,"text":"package fileReader\n\nimport fileReader.model.Point\nimport fileReader.service.CSV\n\n\nobject Main {\n\n  def main(args: Array[String]): Unit = {\n    val result = CSV.read(\"points.csv\", Point.fromCsvLine)\n    println(result.nbInvalidLine)\n    result.lines.foreach(println)\n  }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Main.scala"},"position":{"line":9,"character":4}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line:     val result = CSV.read("points.csv", Point.fromCsvLine)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: $/cancelRequest: JsonRpcNotificationMessage(2.0, $/cancelRequest, {"id":3})[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Main.scala"},"position":{"line":9,"character":4}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line:     val result = CSV.read("points.csv", Point.fromCsvLine)[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol va[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol va[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Database.scala"},"position":{"line":0,"character":1}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line: import slick.driver.H2Driver.api._[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: $/cancelRequest: JsonRpcNotificationMessage(2.0, $/cancelRequest, {"id":5})[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Database.scala"},"position":{"line":1,"character":11}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line: import scala.concurrent.ExecutionContext.Implicits.global[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: $/cancelRequest: JsonRpcNotificationMessage(2.0, $/cancelRequest, {"id":6})[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Database.scala"},"position":{"line":1,"character":29}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line: import scala.concurrent.ExecutionContext.Implicits.global[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol scala[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol mport[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol ExecutionContext[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Main.scala"},"position":{"line":3,"character":5}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line: import fileReader.service.CSV[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol mport[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Database.scala"},"position":{"line":13,"character":4}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line:     class AirportTable(tag: Tag) extends Table[Airport](tag, "AIRPORTS"){[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol clas[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/model/Airport.scala","languageId":"scala","version":1,"text":"package fileReader.model\r\n\r\nimport scala.util.Try\r\n\r\nfinal case class Airport(id: Int, \r\n                         ident: NonEmptyString, \r\n                         building_type: NonEmptyString, \r\n                         name: NonEmptyString, \r\n                         latitude_deg: Float, \r\n                         longitude_deg: Float, \r\n                         elevation_ft: Int, \r\n                         continent: Code, \r\n                         iso_country: Code, \r\n                         iso_region: String, \r\n                         municipality: String, \r\n                         scheduled_service: String, \r\n                         gps_code: Option[String], \r\n                         iata_code: String, \r\n                         local_code: Option[String], \r\n                         home_link: Option[String], \r\n                         wikipedia_link: Option[String] ) extends Airport\r\n\r\n\r\nobject Airport {\r\n  def fromCsvLine(line: Array[string]): Option[Airport] = {\r\n    parseAirport(line)\r\n  }\r\n\r\n\r\n  //pattern matching is forbose so you can implement detailed error msg if you feel like it\r\n  def parseAirport(line: Array[String]) = {\r\n    (Try(line(1).toInt).toOption, Try(line(7).toInt).toOption, Try(line(5).toFloat).toOption, Try(line(6).toFloat).toOption) match {\r\n      case (Some(x), Some(y), Some(z), Some(a)) => Some(Airport(x, line(2) , line(3), line(4), z, a, y, line(8), line(9), line(10), line(11), line(12), line(13), line(14), line(15), line(16), line(17))\r\n      case (None, Some(_), Some(_), Some(_)) | (Some(_), None, Some(_), Some(_)) | (Some(_), Some(_), None, Some(_)) | (Some(_), Some(_), Some(_), None) => None // 1 error\r\n      case (None, None, Some(_), Some(_)) | (None, Some(_), None, Some(_)) | (None, Some(_), Some(_), None)| (Some(_), None, Some(_), None) | (Some(_), None, None, Some(_)) | (Some(_), Some(_), None, None) => None // 2 errors\r\n      case (Some(_), None, None, None) | (None, Some(_), None, None) | (None, None, Some(_), None) | (None, None, None, Some(_)) => None // 3 error\r\n      case (None, None, None, None) => None // 4 errors\r\n    }\r\n  }\r\n}\r\n\r\nclass NonEmptyString (val underlying: String) extends AnyVal\r\n\r\nobject NonEmptyString {\r\n  def foo: NonEmptyString = new NonEmptyString(checkEmpty(underlying))\r\n\r\n  def checkEmpty(arg: String){\r\n    arg match {\r\n      case None    => None\r\n      case Some(s) => s.trim.isEmpty\r\n    }\r\n  }\r\n  \r\n}\r\n\r\nclass Code (val underlying: String) extends AnyVal\r\n\r\nobject Code {\r\n  def foo: Code = new Code(checkCode(underlying))\r\n\r\n  def checkCode(arg: String){\r\n    val pattern = new Regex(\"[A-Z][A-Z]\")\r\n    arg match{\r\n      case pattern => arg\r\n      case _       => None\r\n    }\r\n  }\r\n}"}})[0m
