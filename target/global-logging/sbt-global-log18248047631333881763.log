[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\admin\Desktop\Cours M2\Scala\scala_project\target\scala-2.13\zinc\inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 2 s, completed 3 fÃ©vr. 2022, 12:38:33[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/service/CSV.scala","languageId":"scala","version":1,"text":"package fileReader.service\n\nimport java.nio.file.{Files, Path}\nimport scala.jdk.CollectionConverters.IteratorHasAsScala\n\n\nfinal case class ReadResult[A](lines: Iterator[A], nbInvalidLine: Int)\n\nobject CSV {\n\n  def read[A](fileName: String, parseLine: Array[String] => Option[A], regex: String = \",\") = {\n    val (parsedLine, invalidLine) = Option(Files.lines(Path.of(s\"src/main/data/$fileName\")))\n      .map(_.iterator().asScala)\n      .getOrElse(Iterator.empty) // if file can't be read option will be a none.\n      .drop(1)  // drop csv header\n      .map(_.split(regex))\n      .map(_.map(_.trim))\n      .map(parseLine)\n      .partition(_.isDefined)\n\n    ReadResult(parsedLine.flatten, invalidLine.size)\n  }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/service/CSV.scala"},"position":{"line":6,"character":13}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line: final case class ReadResult[A](lines: Iterator[A], nbInvalidLine: Int)[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol lass[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/service/CSV.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/model/Point.scala","languageId":"scala","version":1,"text":"package fileReader.model\n\nimport scala.util.Try\n\nsealed trait Point\nfinal case class Point2D(x: Long, y: Long) extends Point\nfinal case class Point3D(x: Long, y: Long, z: Long) extends Point\n\n\nobject Point {\n  def fromCsvLine(line: Array[String]): Option[Point] = {\n    line.size match {\n      case 2 => parse2DPoint(line)\n      case 3 => parse3DPoint(line)\n      case _ => None\n      }\n  }\n\n  //pattern matching is forbose so you can implement detailed error msg if you feel like it\n  def parse2DPoint(line: Array[String]) = {\n    (Try(line(0).toLong).toOption, Try(line(1).toLong).toOption) match {\n      case (Some(x), Some(y)) => Some(Point2D(x,y))\n      case (Some(x), None) => None\n      case (None, Some(y)) => None\n      case (None, None) => None\n    }\n  }\n\n  //pattern matching is forbose so you can implement detailed error msg if you feel like it\n  def parse3DPoint(line: Array[String]) = {\n    (Try(line(0).toLong).toOption, Try(line(1).toLong).toOption, Try(line(2).toLong).toOption) match {\n      case (Some(x), Some(y), Some(z)) => Some(Point3D(x,y, z))\n      case (Some(_), None, Some(_)) | (None, Some(_), Some(_)) | (Some(_), Some(_), None) => None // 1 error\n      case (Some(_), None, None) | (None, Some(_), None) | (None, None, Some(_)) => None // 2 errors\n      case (None, None, None) => None // 3 errors\n    }\n  }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/model/Point.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Main.scala","languageId":"scala","version":1,"text":"package fileReader\n\nimport fileReader.model.Point\nimport fileReader.service.CSV\n\n\nobject Main {\n\n  def main(args: Array[String]): Unit = {\n    val result = CSV.read(\"points.csv\", Point.fromCsvLine)\n    println(result.nbInvalidLine)\n    result.lines.foreach(println)\n  }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/admin/Desktop/Cours%20M2/Scala/scala_project/src/main/scala/fileReader/Main.scala"}})[0m
